package com.siqi.bits;

import java.util.List;
import com.siqi.bits.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table CATEGORY.
 */
public class Category {

    private Long id;
    private String name;
    private String iconDrawableName;
    /** Not-null value. */
    private java.util.Date createdOn;
    /** Not-null value. */
    private java.util.Date modifiedOn;
    private java.util.Date deletedOn;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CategoryDao myDao;

    private List<Task> tasks;

    public Category() {
    }

    public Category(Long id) {
        this.id = id;
    }

    public Category(Long id, String name, String iconDrawableName, java.util.Date createdOn, java.util.Date modifiedOn, java.util.Date deletedOn) {
        this.id = id;
        this.name = name;
        this.iconDrawableName = iconDrawableName;
        this.createdOn = createdOn;
        this.modifiedOn = modifiedOn;
        this.deletedOn = deletedOn;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCategoryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getIconDrawableName() {
        return iconDrawableName;
    }

    public void setIconDrawableName(String iconDrawableName) {
        this.iconDrawableName = iconDrawableName;
    }

    /** Not-null value. */
    public java.util.Date getCreatedOn() {
        return createdOn;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreatedOn(java.util.Date createdOn) {
        this.createdOn = createdOn;
    }

    /** Not-null value. */
    public java.util.Date getModifiedOn() {
        return modifiedOn;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setModifiedOn(java.util.Date modifiedOn) {
        this.modifiedOn = modifiedOn;
    }

    public java.util.Date getDeletedOn() {
        return deletedOn;
    }

    public void setDeletedOn(java.util.Date deletedOn) {
        this.deletedOn = deletedOn;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Task> getTasks() {
        if (tasks == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TaskDao targetDao = daoSession.getTaskDao();
            List<Task> tasksNew = targetDao._queryCategory_Tasks(id);
            synchronized (this) {
                if(tasks == null) {
                    tasks = tasksNew;
                }
            }
        }
        return tasks;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTasks() {
        tasks = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
