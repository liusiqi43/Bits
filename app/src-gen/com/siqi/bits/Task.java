package com.siqi.bits;

import android.util.Log;

import com.google.common.primitives.Chars;

import org.ocpsoft.prettytime.PrettyTime;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table TASK.
 */
public class Task {

    private Long id;
    /** Not-null value. */
    private String description;
    /** Not-null value. */
    private String history;
    /** Not-null value. */
    private java.util.Date createdOn;
    /** Not-null value. */
    private java.util.Date modifiedOn;
    private java.util.Date deletedOn;
    private long interval;
    private Long lastDone;
    private long nextScheduledTime;
    private int doneCount;
    private int skipCount;
    private int lateCount;
    private long categoryId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TaskDao myDao;

    private Category category;
    private Long category__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Task() {
    }

    public Task(Long id) {
        this.id = id;
    }

    public Task(Long id, String description, String history, java.util.Date createdOn, java.util.Date modifiedOn, java.util.Date deletedOn, long interval, Long lastDone, long nextScheduledTime, int doneCount, int skipCount, int lateCount, long categoryId) {
        this.id = id;
        this.description = description;
        this.history = history;
        this.createdOn = createdOn;
        this.modifiedOn = modifiedOn;
        this.deletedOn = deletedOn;
        this.interval = interval;
        this.lastDone = lastDone;
        this.nextScheduledTime = nextScheduledTime;
        this.doneCount = doneCount;
        this.skipCount = skipCount;
        this.lateCount = lateCount;
        this.categoryId = categoryId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTaskDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getDescription() {
        return description;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDescription(String description) {
        this.description = description;
    }

    /** Not-null value. */
    public String getHistory() {
        return history;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setHistory(String history) {
        this.history = history;
    }

    /** Not-null value. */
    public java.util.Date getCreatedOn() {
        return createdOn;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreatedOn(java.util.Date createdOn) {
        this.createdOn = createdOn;
    }

    /** Not-null value. */
    public java.util.Date getModifiedOn() {
        return modifiedOn;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setModifiedOn(java.util.Date modifiedOn) {
        this.modifiedOn = modifiedOn;
    }

    public java.util.Date getDeletedOn() {
        return deletedOn;
    }

    public void setDeletedOn(java.util.Date deletedOn) {
        this.deletedOn = deletedOn;
    }

    public long getInterval() {
        return interval;
    }

    public void setInterval(long interval) {
        this.interval = interval;
    }

    public Long getLastDone() {
        return lastDone;
    }

    public void setLastDone(Long lastDone) {
        this.lastDone = lastDone;
    }

    public long getNextScheduledTime() {
        return nextScheduledTime;
    }

    public void setNextScheduledTime(long nextScheduledTime) {
        this.nextScheduledTime = nextScheduledTime;
    }

    public int getDoneCount() {
        return doneCount;
    }

    public void setDoneCount(int doneCount) {
        this.doneCount = doneCount;
    }

    public int getSkipCount() {
        return skipCount;
    }

    public void setSkipCount(int skipCount) {
        this.skipCount = skipCount;
    }

    public int getLateCount() {
        return lateCount;
    }

    public void setLateCount(int lateCount) {
        this.lateCount = lateCount;
    }

    public long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(long categoryId) {
        this.categoryId = categoryId;
    }

    /** To-one relationship, resolved on first access. */
    public Category getCategory() {
        long __key = this.categoryId;
        if (category__resolvedKey == null || !category__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            Category categoryNew = targetDao.load(__key);
            synchronized (this) {
                category = categoryNew;
            	category__resolvedKey = __key;
            }
        }
        return category;
    }

    public void setCategory(Category category) {
        if (category == null) {
            throw new DaoException("To-one property 'categoryId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.category = category;
            categoryId = category.getId();
            category__resolvedKey = categoryId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public void setLastDoneAndUpdateNextScheduleTime(long lastDone) {
        this.setLastDone(lastDone);
        this.setNextScheduledTime(lastDone + this.getInterval());
    }

    public void incrementSkipCount() {
        // Call AppendLateCount before setting new LastDoneTime, because of the dependancy of this attribute
        appendLateCount();
        setNextScheduledTime(System.currentTimeMillis() + getInterval());
        this.setSkipCount(this.getSkipCount() + 1);
        setHistory(getHistory()+'s');
    }

    public void appendLateCount() {
        int appendCount = getLastDone() == null ? 0 : (int) ((System.currentTimeMillis() - getLastDone()) / getInterval());
        String history = getHistory();
        StringBuilder builder = new StringBuilder(history);

        setLateCount(this.getLateCount() + appendCount);
        while (appendCount > 0){
            builder.append('l');
            --appendCount;
        }

        setHistory(builder.toString());
    }

    public int getProgress() {
        long duration = getNextScheduledTime() - System.currentTimeMillis();
        return (int) (100 - ((long) 100 * duration / getInterval()));
    }

    public void incrementDoneCount() {
        // Call AppendLateCount before setting new LastDoneTime, because of the dependancy of this attribute
        appendLateCount();
        setLastDoneAndUpdateNextScheduleTime(System.currentTimeMillis());
        this.setDoneCount(this.getDoneCount() + 1);
        setHistory(getHistory()+'d');
    }

    public List<Character> getHistoryAsCharArray(int rowLength) {
        List<Character> temp = Chars.asList(this.getHistory().toCharArray());
        List<Character> chars = new ArrayList<Character>(temp.size());

        for (Character c: temp) {
            chars.add(c);
        }

        int toAppendNone;
        if (chars.size() == 0){
            toAppendNone = rowLength;
        }
        else {
            toAppendNone = rowLength - (chars.size() % rowLength);
        }

        while (toAppendNone > 0) {
            chars.add('n');
            --toAppendNone;
        }

        return chars;
    }

    public String getTimesAgoDescription(String doneString, String justAddedMessage, PrettyTime prettyTime) {
        if (getLastDone() != null)
            return new StringBuilder().append(doneString).append(' ').append(prettyTime.format(new Date(getLastDone()))).toString();
        else {
            return justAddedMessage;
        }
    }
    // KEEP METHODS END

}
