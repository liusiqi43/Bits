package com.siqi.bits;

import java.util.List;
import com.siqi.bits.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table TASK.
 */
public class Task {

    private Long id;
    /** Not-null value. */
    private String description;
    /** Not-null value. */
    private java.util.Date createdOn;
    /** Not-null value. */
    private java.util.Date modifiedOn;
    private java.util.Date deletedOn;
    private int doneCount;
    private int lateCount;
    private int skipCount;
    private long currentInterval;
    private long period;
    private long nextScheduledTime;
    private int frequency;
    private long categoryId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TaskDao myDao;

    private Category category;
    private Long category__resolvedKey;

    private List<ActionRecord> actionsRecords;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Task() {
    }

    public Task(Long id) {
        this.id = id;
    }

    public Task(Long id, String description, java.util.Date createdOn, java.util.Date modifiedOn, java.util.Date deletedOn, int doneCount, int lateCount, int skipCount, long currentInterval, long period, long nextScheduledTime, int frequency, long categoryId) {
        this.id = id;
        this.description = description;
        this.createdOn = createdOn;
        this.modifiedOn = modifiedOn;
        this.deletedOn = deletedOn;
        this.doneCount = doneCount;
        this.lateCount = lateCount;
        this.skipCount = skipCount;
        this.currentInterval = currentInterval;
        this.period = period;
        this.nextScheduledTime = nextScheduledTime;
        this.frequency = frequency;
        this.categoryId = categoryId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTaskDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getDescription() {
        return description;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDescription(String description) {
        this.description = description;
    }

    /** Not-null value. */
    public java.util.Date getCreatedOn() {
        return createdOn;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreatedOn(java.util.Date createdOn) {
        this.createdOn = createdOn;
    }

    /** Not-null value. */
    public java.util.Date getModifiedOn() {
        return modifiedOn;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setModifiedOn(java.util.Date modifiedOn) {
        this.modifiedOn = modifiedOn;
    }

    public java.util.Date getDeletedOn() {
        return deletedOn;
    }

    public void setDeletedOn(java.util.Date deletedOn) {
        this.deletedOn = deletedOn;
    }

    public int getDoneCount() {
        return doneCount;
    }

    public void setDoneCount(int doneCount) {
        this.doneCount = doneCount;
    }

    public int getLateCount() {
        return lateCount;
    }

    public void setLateCount(int lateCount) {
        this.lateCount = lateCount;
    }

    public int getSkipCount() {
        return skipCount;
    }

    public void setSkipCount(int skipCount) {
        this.skipCount = skipCount;
    }

    public long getCurrentInterval() {
        return currentInterval;
    }

    public void setCurrentInterval(long currentInterval) {
        this.currentInterval = currentInterval;
    }

    public long getPeriod() {
        return period;
    }

    public void setPeriod(long period) {
        this.period = period;
    }

    public long getNextScheduledTime() {
        return nextScheduledTime;
    }

    public void setNextScheduledTime(long nextScheduledTime) {
        this.nextScheduledTime = nextScheduledTime;
    }

    public int getFrequency() {
        return frequency;
    }

    public void setFrequency(int frequency) {
        this.frequency = frequency;
    }

    public long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(long categoryId) {
        this.categoryId = categoryId;
    }

    /** To-one relationship, resolved on first access. */
    public Category getCategory() {
        long __key = this.categoryId;
        if (category__resolvedKey == null || !category__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            Category categoryNew = targetDao.load(__key);
            synchronized (this) {
                category = categoryNew;
            	category__resolvedKey = __key;
            }
        }
        return category;
    }

    public void setCategory(Category category) {
        if (category == null) {
            throw new DaoException("To-one property 'categoryId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.category = category;
            categoryId = category.getId();
            category__resolvedKey = categoryId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ActionRecord> getActionsRecords() {
        if (actionsRecords == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ActionRecordDao targetDao = daoSession.getActionRecordDao();
            List<ActionRecord> actionsRecordsNew = targetDao._queryTask_ActionsRecords(id);
            synchronized (this) {
                if(actionsRecords == null) {
                    actionsRecords = actionsRecordsNew;
                }
            }
        }
        return actionsRecords;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetActionsRecords() {
        actionsRecords = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    public int getProgress() {
        long duration = getNextScheduledTime() - System.currentTimeMillis();
        return (int) (100 - ((long) 100 * duration / getCurrentInterval()));
    }

    public long getAvgInterval() {
        return getPeriod() / getFrequency();
    }

    public long getPastMillisOfCurrentPeriod() {
        long period = getPeriod();
        long createdOn = getCreatedOn().getTime();

        return (System.currentTimeMillis() - createdOn) % period;
    }
    // KEEP METHODS END

}
