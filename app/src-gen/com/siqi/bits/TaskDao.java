package com.siqi.bits;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.siqi.bits.Task;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TASK.
*/
public class TaskDao extends AbstractDao<Task, Long> {

    public static final String TABLENAME = "TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Description = new Property(1, String.class, "description", false, "DESCRIPTION");
        public final static Property History = new Property(2, String.class, "history", false, "HISTORY");
        public final static Property CreatedOn = new Property(3, java.util.Date.class, "createdOn", false, "CREATED_ON");
        public final static Property ModifiedOn = new Property(4, java.util.Date.class, "modifiedOn", false, "MODIFIED_ON");
        public final static Property DeletedOn = new Property(5, java.util.Date.class, "deletedOn", false, "DELETED_ON");
        public final static Property Interval = new Property(6, long.class, "interval", false, "INTERVAL");
        public final static Property LastDone = new Property(7, Long.class, "lastDone", false, "LAST_DONE");
        public final static Property NextScheduledTime = new Property(8, long.class, "nextScheduledTime", false, "NEXT_SCHEDULED_TIME");
        public final static Property DoneCount = new Property(9, int.class, "doneCount", false, "DONE_COUNT");
        public final static Property SkipCount = new Property(10, int.class, "skipCount", false, "SKIP_COUNT");
        public final static Property LateCount = new Property(11, int.class, "lateCount", false, "LATE_COUNT");
        public final static Property CategoryId = new Property(12, long.class, "categoryId", false, "CATEGORY_ID");
    };

    private DaoSession daoSession;

    private Query<Task> category_TasksQuery;

    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TASK' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DESCRIPTION' TEXT NOT NULL ," + // 1: description
                "'HISTORY' TEXT NOT NULL ," + // 2: history
                "'CREATED_ON' INTEGER NOT NULL ," + // 3: createdOn
                "'MODIFIED_ON' INTEGER NOT NULL ," + // 4: modifiedOn
                "'DELETED_ON' INTEGER," + // 5: deletedOn
                "'INTERVAL' INTEGER NOT NULL ," + // 6: interval
                "'LAST_DONE' INTEGER," + // 7: lastDone
                "'NEXT_SCHEDULED_TIME' INTEGER NOT NULL ," + // 8: nextScheduledTime
                "'DONE_COUNT' INTEGER NOT NULL ," + // 9: doneCount
                "'SKIP_COUNT' INTEGER NOT NULL ," + // 10: skipCount
                "'LATE_COUNT' INTEGER NOT NULL ," + // 11: lateCount
                "'CATEGORY_ID' INTEGER NOT NULL );"); // 12: categoryId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TASK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDescription());
        stmt.bindString(3, entity.getHistory());
        stmt.bindLong(4, entity.getCreatedOn().getTime());
        stmt.bindLong(5, entity.getModifiedOn().getTime());
 
        java.util.Date deletedOn = entity.getDeletedOn();
        if (deletedOn != null) {
            stmt.bindLong(6, deletedOn.getTime());
        }
        stmt.bindLong(7, entity.getInterval());
 
        Long lastDone = entity.getLastDone();
        if (lastDone != null) {
            stmt.bindLong(8, lastDone);
        }
        stmt.bindLong(9, entity.getNextScheduledTime());
        stmt.bindLong(10, entity.getDoneCount());
        stmt.bindLong(11, entity.getSkipCount());
        stmt.bindLong(12, entity.getLateCount());
        stmt.bindLong(13, entity.getCategoryId());
    }

    @Override
    protected void attachEntity(Task entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // description
            cursor.getString(offset + 2), // history
            new java.util.Date(cursor.getLong(offset + 3)), // createdOn
            new java.util.Date(cursor.getLong(offset + 4)), // modifiedOn
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // deletedOn
            cursor.getLong(offset + 6), // interval
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // lastDone
            cursor.getLong(offset + 8), // nextScheduledTime
            cursor.getInt(offset + 9), // doneCount
            cursor.getInt(offset + 10), // skipCount
            cursor.getInt(offset + 11), // lateCount
            cursor.getLong(offset + 12) // categoryId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDescription(cursor.getString(offset + 1));
        entity.setHistory(cursor.getString(offset + 2));
        entity.setCreatedOn(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setModifiedOn(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setDeletedOn(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setInterval(cursor.getLong(offset + 6));
        entity.setLastDone(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setNextScheduledTime(cursor.getLong(offset + 8));
        entity.setDoneCount(cursor.getInt(offset + 9));
        entity.setSkipCount(cursor.getInt(offset + 10));
        entity.setLateCount(cursor.getInt(offset + 11));
        entity.setCategoryId(cursor.getLong(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Task entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Task entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "tasks" to-many relationship of Category. */
    public List<Task> _queryCategory_Tasks(long categoryId) {
        synchronized (this) {
            if (category_TasksQuery == null) {
                QueryBuilder<Task> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CategoryId.eq(null));
                queryBuilder.orderRaw("NEXT_SCHEDULED_TIME ASC");
                category_TasksQuery = queryBuilder.build();
            }
        }
        Query<Task> query = category_TasksQuery.forCurrentThread();
        query.setParameter(0, categoryId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCategoryDao().getAllColumns());
            builder.append(" FROM TASK T");
            builder.append(" LEFT JOIN CATEGORY T0 ON T.'CATEGORY_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Task loadCurrentDeep(Cursor cursor, boolean lock) {
        Task entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Category category = loadCurrentOther(daoSession.getCategoryDao(), cursor, offset);
         if(category != null) {
            entity.setCategory(category);
        }

        return entity;    
    }

    public Task loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Task> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Task> list = new ArrayList<Task>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Task> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Task> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
