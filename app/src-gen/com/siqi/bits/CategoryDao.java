package com.siqi.bits;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.siqi.bits.Category;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CATEGORY.
*/
public class CategoryDao extends AbstractDao<Category, Long> {

    public static final String TABLENAME = "CATEGORY";

    /**
     * Properties of entity Category.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property IconDrawableName = new Property(2, String.class, "iconDrawableName", false, "ICON_DRAWABLE_NAME");
        public final static Property CreatedOn = new Property(3, java.util.Date.class, "createdOn", false, "CREATED_ON");
        public final static Property ModifiedOn = new Property(4, java.util.Date.class, "modifiedOn", false, "MODIFIED_ON");
        public final static Property DeletedOn = new Property(5, java.util.Date.class, "deletedOn", false, "DELETED_ON");
    };

    private DaoSession daoSession;


    public CategoryDao(DaoConfig config) {
        super(config);
    }
    
    public CategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CATEGORY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'ICON_DRAWABLE_NAME' TEXT," + // 2: iconDrawableName
                "'CREATED_ON' INTEGER NOT NULL ," + // 3: createdOn
                "'MODIFIED_ON' INTEGER NOT NULL ," + // 4: modifiedOn
                "'DELETED_ON' INTEGER);"); // 5: deletedOn
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CATEGORY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Category entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String iconDrawableName = entity.getIconDrawableName();
        if (iconDrawableName != null) {
            stmt.bindString(3, iconDrawableName);
        }
        stmt.bindLong(4, entity.getCreatedOn().getTime());
        stmt.bindLong(5, entity.getModifiedOn().getTime());
 
        java.util.Date deletedOn = entity.getDeletedOn();
        if (deletedOn != null) {
            stmt.bindLong(6, deletedOn.getTime());
        }
    }

    @Override
    protected void attachEntity(Category entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Category readEntity(Cursor cursor, int offset) {
        Category entity = new Category( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // iconDrawableName
            new java.util.Date(cursor.getLong(offset + 3)), // createdOn
            new java.util.Date(cursor.getLong(offset + 4)), // modifiedOn
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // deletedOn
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Category entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIconDrawableName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreatedOn(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setModifiedOn(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setDeletedOn(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Category entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Category entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
